package autocode

import (
	"fmt"
	"os"

	"github.com/Gophercraft/core/format/dbc/dbd"
)

func (g *Generator) binana_write_layout(file *Printer, target *layoutTarget) (err error) {
	indexIsID := target.Layout.Column("ID") == nil

	file.Printf("struct %sRec {\n", target.Definition.Name)
	normalizedColumnNames := make([]string, len(target.Layout.Columns))

	for i := range target.Layout.Columns {
		normalizedColumnNames[i] = g.normalizeFieldName(target.Layout.Columns[i].Name)
	}

	for i, column := range target.Layout.Columns {
		var (
			arraySuffix string
			cppType     string
			memberName  string
			columnDef   = target.Definition.Column(column.Name)
		)

		memberName = normalizedColumnNames[i]

		switch columnDef.Type {
		case dbd.LocString:
			cppType = "const char*"
		case dbd.String:
			cppType = "const char*"
		case dbd.Uint:
			cppType = fmt.Sprintf("uint%d_t", column.Bits)
		case dbd.Int:
			if column.Signed {
				cppType = fmt.Sprintf("int%d_t", column.Bits)
			} else {
				cppType = fmt.Sprintf("uint%d_t", column.Bits)
			}
		case dbd.Float:
			switch column.Bits {
			case 32:
				cppType = "float"
			case 64:
				cppType = "double"
			default:
				panic(column.Bits)
			}
		}

		if column.ArraySize > -1 {
			arraySuffix = fmt.Sprintf("[%d]", column.ArraySize) + arraySuffix
		}

		file.Printf("  %s m_%s%s;", cppType, memberName, arraySuffix)

		if !columnDef.Verified {
			file.Printf(" // unconfirmed")
		}

		file.Printf("\n")
	}

	if indexIsID {
		file.Printf("  int32_t m_generatedID;\n")
	}
	file.Printf("};\n")
	file.Printf("\n")
	return
}

func (g *Generator) GenerateBinana(location string) (err error) {
	if err = g.loadAlternativeDefs(); err != nil {
		return
	}

	if err = g.findLayoutTargets(); err != nil {
		return
	}

	p := new(Printer)
	p.File, err = os.OpenFile(
		location,
		os.O_CREATE|os.O_RDWR|os.O_TRUNC,
		0700,
	)
	if err != nil {
		panic(err)
	}

	if g.showEditWarning() {
		p.Printf("// DO NOT EDIT: generated by whoa-autocode\n")
	}

	import_guard_token := "DB_RECORDS_H"

	p.Printf("#ifndef %s\n", import_guard_token)
	p.Printf("#define %s\n", import_guard_token)
	p.Printf("\n")
	p.Printf("#include \"db/clientdb.h\"\n")
	p.Printf("\n")

	// write layout forward declarations
	for _, l := range g.layouts {
		p.Printf("DECLARE_STRUCT(%sRec);\n", l.Definition.Name)
	}
	p.Printf("\n")

	// write layout structures
	for _, l := range g.layouts {
		if err = g.binana_write_layout(p, l); err != nil {
			return
		}
	}
	p.Printf("\n")

	// write layout structures
	for _, l := range g.layouts {
		if err = g.binana_write_layout(p, l); err != nil {
			return
		}
	}
	p.Printf("\n")

	// create template types for structures
	// write layout structures
	for _, l := range g.layouts {
		p.Printf("DB_CLIENT_DB(%sRec);\n", l.Definition.Name)
	}
	p.Printf("\n")

	p.Printf("#endif")
	return
}
