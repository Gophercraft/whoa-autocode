package autocode

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"path/filepath"
)

type Printer struct {
	File *os.File
}

func (g *Generator) NewPrinter(path string) (p *Printer, err error) {
	log.Println("opening", path)

	p = new(Printer)

	if err = g.ensurePath(path); err != nil {
		return
	}

	p.File, err = os.OpenFile(
		filepath.Join(g.OutputDirectory, path),
		os.O_CREATE|os.O_RDWR|os.O_TRUNC,
		0700,
	)

	if err != nil {
		return
	}

	p.Printf("// DO NOT EDIT: generated by whoa-autocode\n")
	return
}

func (p *Printer) Write(b []byte) (int, error) {
	z := bytes.ReplaceAll(b, []byte("\t"), []byte("    "))

	_, err := p.File.Write(z)
	return len(b), err
}

func (p *Printer) Printf(format string, args ...any) {
	fmt.Fprintf(p, format, args...)
}

func (p *Printer) Close() error {
	return p.File.Close()
}
