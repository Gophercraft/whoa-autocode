// DO NOT EDIT: generated by whoa-autocode
#include "db/rec/SpellItemEnchantmentRec.hpp"

const char* SpellItemEnchantmentRec::GetFilename() {
    return "DBFilesClient\\SpellItemEnchantment.dbc";
}

bool SpellItemEnchantmentRec::Read(SFile* f, const char* stringBuffer) {
    uint32_t Name_langOfs[16];
    uint32_t Name_langMask;

    if (
        !SFile::Read(f, &this->m_ID, sizeof(this->m_ID), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_Charges, sizeof(this->m_Charges), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_Effect[0], sizeof(m_Effect[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_Effect[1], sizeof(m_Effect[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_Effect[2], sizeof(m_Effect[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_EffectPointsMin[0], sizeof(m_EffectPointsMin[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_EffectPointsMin[1], sizeof(m_EffectPointsMin[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_EffectPointsMin[2], sizeof(m_EffectPointsMin[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_EffectPointsMax[0], sizeof(m_EffectPointsMax[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_EffectPointsMax[1], sizeof(m_EffectPointsMax[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_EffectPointsMax[2], sizeof(m_EffectPointsMax[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_EffectArg[0], sizeof(m_EffectArg[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_EffectArg[1], sizeof(m_EffectArg[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_EffectArg[2], sizeof(m_EffectArg[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &Name_langOfs[0], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &Name_langOfs[1], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &Name_langOfs[2], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &Name_langOfs[3], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &Name_langOfs[4], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &Name_langOfs[5], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &Name_langOfs[6], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &Name_langOfs[7], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &Name_langOfs[8], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &Name_langOfs[9], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &Name_langOfs[10], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &Name_langOfs[11], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &Name_langOfs[12], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &Name_langOfs[13], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &Name_langOfs[14], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &Name_langOfs[15], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &Name_langMask, sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_ItemVisual, sizeof(this->m_ItemVisual), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_Flags, sizeof(this->m_Flags), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_Src_itemID, sizeof(this->m_Src_itemID), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_Condition_ID, sizeof(this->m_Condition_ID), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_RequiredSkillID, sizeof(this->m_RequiredSkillID), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_RequiredSkillRank, sizeof(this->m_RequiredSkillRank), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_MinLevel, sizeof(this->m_MinLevel), nullptr, nullptr, nullptr)
    ) {
        return false;
    }

    if (stringBuffer) {
        this->m_Name_lang = &stringBuffer[Name_langOfs[CURRENT_LANGUAGE]];
    } else {
        this->m_Name_lang = "";
    }

    return true;
}
