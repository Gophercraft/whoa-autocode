// DO NOT EDIT: generated by whoa-autocode
#include "db/rec/CharTitlesRec.hpp"

const char* CharTitlesRec::GetFilename() {
    return "DBFilesClient\\CharTitles.dbc";
}

int32_t CharTitlesRec::GetNumColumns() {
    return 37;
}

int32_t CharTitlesRec::GetRowSize() {
    return 148;
}

bool CharTitlesRec::NeedIDAssigned() {
    return false;
}

int32_t CharTitlesRec::GetID() {
    return this->m_ID;
}

void CharTitlesRec::SetID(int32_t id) {
    this->m_ID = id;
}

bool CharTitlesRec::Read(SFile* f, const char* stringBuffer) {
    uint32_t nameOfs[16];
    uint32_t nameMask;
    uint32_t name1Ofs[16];
    uint32_t name1Mask;

    if (
        !SFile::Read(f, &this->m_ID, sizeof(this->m_ID), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_conditionID, sizeof(this->m_conditionID), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &nameOfs[0], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &nameOfs[1], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &nameOfs[2], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &nameOfs[3], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &nameOfs[4], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &nameOfs[5], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &nameOfs[6], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &nameOfs[7], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &nameOfs[8], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &nameOfs[9], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &nameOfs[10], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &nameOfs[11], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &nameOfs[12], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &nameOfs[13], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &nameOfs[14], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &nameOfs[15], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &nameMask, sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &name1Ofs[0], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &name1Ofs[1], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &name1Ofs[2], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &name1Ofs[3], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &name1Ofs[4], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &name1Ofs[5], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &name1Ofs[6], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &name1Ofs[7], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &name1Ofs[8], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &name1Ofs[9], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &name1Ofs[10], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &name1Ofs[11], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &name1Ofs[12], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &name1Ofs[13], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &name1Ofs[14], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &name1Ofs[15], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &name1Mask, sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_maskID, sizeof(this->m_maskID), nullptr, nullptr, nullptr)
    ) {
        return false;
    }

    if (stringBuffer) {
        this->m_name = &stringBuffer[nameOfs[CURRENT_LANGUAGE]];
        this->m_name1 = &stringBuffer[name1Ofs[CURRENT_LANGUAGE]];
    } else {
        this->m_name = "";
        this->m_name1 = "";
    }

    return true;
}
