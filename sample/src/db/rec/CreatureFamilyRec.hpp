// DO NOT EDIT: generated by whoa-autocode
#ifndef DB_CREATUREFAMILY_REC_HPP
#define DB_CREATUREFAMILY_REC_HPP

#include "util/SFile.hpp"
#include <cstdint>

struct CreatureFamilyRec {
	static constexpr uint32_t columnCount = 28;
	static constexpr uint32_t rowSize = 112;
	static constexpr bool indexIsID = false;

	int32_t m_ID;
	float m_MinScale;
	int32_t m_MinScaleLevel;
	float m_MaxScale;
	int32_t m_MaxScaleLevel;
	int32_t m_SkillLine[2];
	int32_t m_PetFoodMask;
	int32_t m_PetTalentType;
	int32_t m_CategoryEnumID;
	const char* m_Name_lang;
	const char* m_IconFile;

	static const char* GetFilename() {
		return "DBFilesClient\\CreatureFamily.dbc";
	}

	bool Read(SFile* f, const char* stringBuffer) {
		uint32_t Name_langOfs[16];
		uint32_t Name_langMask;
		uint32_t IconFileOfs;

		if (
			!SFile::Read(f, &this->m_ID, sizeof(this->m_ID), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_MinScale, sizeof(this->m_MinScale), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_MinScaleLevel, sizeof(this->m_MinScaleLevel), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_MaxScale, sizeof(this->m_MaxScale), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_MaxScaleLevel, sizeof(this->m_MaxScaleLevel), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_SkillLine[0], sizeof(m_SkillLine[0]), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_SkillLine[1], sizeof(m_SkillLine[0]), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_PetFoodMask, sizeof(this->m_PetFoodMask), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_PetTalentType, sizeof(this->m_PetTalentType), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_CategoryEnumID, sizeof(this->m_CategoryEnumID), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[0], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[1], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[2], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[3], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[4], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[5], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[6], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[7], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[8], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[9], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[10], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[11], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[12], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[13], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[14], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[15], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langMask, sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &IconFileOfs, sizeof(uint32_t), nullptr, nullptr, nullptr)
		) {
			return false;
		}

		if (stringBuffer) {
			this->m_Name_lang = &stringBuffer[Name_langOfs[CURRENT_LANGUAGE]];
			this->m_IconFile = &stringBuffer[IconFileOfs];
		} else {
			this->m_Name_lang = "";
			this->m_IconFile = "";
		}

		return true;
	}
};

#endif