// DO NOT EDIT: generated by whoa-autocode
#include "db/rec/SoundEntriesRec.hpp"

const char* SoundEntriesRec::GetFilename() {
    return "DBFilesClient\\SoundEntries.dbc";
}

bool SoundEntriesRec::Read(SFile* f, const char* stringBuffer) {
    uint32_t NameOfs;
    uint32_t FileOfs[10];
    uint32_t DirectoryBaseOfs;

    if (
        !SFile::Read(f, &this->m_ID, sizeof(this->m_ID), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_SoundType, sizeof(this->m_SoundType), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &NameOfs, sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &FileOfs[0], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &FileOfs[1], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &FileOfs[2], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &FileOfs[3], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &FileOfs[4], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &FileOfs[5], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &FileOfs[6], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &FileOfs[7], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &FileOfs[8], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &FileOfs[9], sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_Freq[0], sizeof(m_Freq[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_Freq[1], sizeof(m_Freq[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_Freq[2], sizeof(m_Freq[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_Freq[3], sizeof(m_Freq[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_Freq[4], sizeof(m_Freq[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_Freq[5], sizeof(m_Freq[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_Freq[6], sizeof(m_Freq[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_Freq[7], sizeof(m_Freq[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_Freq[8], sizeof(m_Freq[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_Freq[9], sizeof(m_Freq[0]), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &DirectoryBaseOfs, sizeof(uint32_t), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_VolumeFloat, sizeof(this->m_VolumeFloat), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_Flags, sizeof(this->m_Flags), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_MinDistance, sizeof(this->m_MinDistance), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_DistanceCutoff, sizeof(this->m_DistanceCutoff), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_EAXDef, sizeof(this->m_EAXDef), nullptr, nullptr, nullptr)
        || !SFile::Read(f, &this->m_SoundEntriesAdvancedID, sizeof(this->m_SoundEntriesAdvancedID), nullptr, nullptr, nullptr)
    ) {
        return false;
    }

    if (stringBuffer) {
        this->m_Name = &stringBuffer[NameOfs];
        this->m_File[0] = &stringBuffer[FileOfs[0]];
        this->m_File[1] = &stringBuffer[FileOfs[1]];
        this->m_File[2] = &stringBuffer[FileOfs[2]];
        this->m_File[3] = &stringBuffer[FileOfs[3]];
        this->m_File[4] = &stringBuffer[FileOfs[4]];
        this->m_File[5] = &stringBuffer[FileOfs[5]];
        this->m_File[6] = &stringBuffer[FileOfs[6]];
        this->m_File[7] = &stringBuffer[FileOfs[7]];
        this->m_File[8] = &stringBuffer[FileOfs[8]];
        this->m_File[9] = &stringBuffer[FileOfs[9]];
        this->m_DirectoryBase = &stringBuffer[DirectoryBaseOfs];
    } else {
        this->m_Name = "";
        this->m_File[0] = "";
        this->m_File[1] = "";
        this->m_File[2] = "";
        this->m_File[3] = "";
        this->m_File[4] = "";
        this->m_File[5] = "";
        this->m_File[6] = "";
        this->m_File[7] = "";
        this->m_File[8] = "";
        this->m_File[9] = "";
        this->m_DirectoryBase = "";
    }

    return true;
}
