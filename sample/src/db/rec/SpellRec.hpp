// DO NOT EDIT: generated by whoa-autocode
#ifndef DB_REC_SPELL_REC_HPP
#define DB_REC_SPELL_REC_HPP

#include "util/SFile.hpp"
#include <cstdint>

class SpellRec {
    public:
        int32_t m_ID;
        int32_t m_category;
        int32_t m_dispelType;
        int32_t m_mechanic;
        int32_t m_attributes;
        int32_t m_attributesEx;
        int32_t m_attributesExB;
        int32_t m_attributesExC;
        int32_t m_attributesExD;
        int32_t m_attributesExE;
        int32_t m_attributesExF;
        int32_t m_attributesExG;
        int32_t m_shapeshiftMask[2];
        int32_t m_shapeshiftExclude[2];
        int32_t m_targets;
        int32_t m_targetCreatureType;
        int32_t m_requiresSpellFocus;
        int32_t m_facingCasterFlags;
        int32_t m_casterAuraState;
        int32_t m_targetAuraState;
        int32_t m_excludeCasterAuraState;
        int32_t m_excludeTargetAuraState;
        int32_t m_casterAuraSpell;
        int32_t m_targetAuraSpell;
        int32_t m_excludeCasterAuraSpell;
        int32_t m_excludeTargetAuraSpell;
        int32_t m_castingTimeIndex;
        int32_t m_recoveryTime;
        int32_t m_categoryRecoveryTime;
        int32_t m_interruptFlags;
        int32_t m_auraInterruptFlags;
        int32_t m_channelInterruptFlags;
        int32_t m_procTypeMask;
        int32_t m_procChance;
        int32_t m_procCharges;
        int32_t m_maxLevel;
        int32_t m_baseLevel;
        int32_t m_spellLevel;
        int32_t m_durationIndex;
        int32_t m_powerType;
        int32_t m_manaCost;
        int32_t m_manaCostPerLevel;
        int32_t m_manaPerSecond;
        int32_t m_manaPerSecondPerLevel;
        int32_t m_rangeIndex;
        float m_speed;
        int32_t m_modalNextSpell;
        int32_t m_cumulativeAura;
        int32_t m_totem[2];
        int32_t m_reagent[8];
        int32_t m_reagentCount[8];
        int32_t m_equippedItemClass;
        int32_t m_equippedItemSubclass;
        int32_t m_equippedItemInvTypes;
        int32_t m_effect[3];
        int32_t m_effectDieSides[3];
        float m_effectRealPointsPerLevel[3];
        int32_t m_effectBasePoints[3];
        int32_t m_effectMechanic[3];
        int32_t m_implicitTargetA[3];
        int32_t m_implicitTargetB[3];
        int32_t m_effectRadiusIndex[3];
        int32_t m_effectAura[3];
        int32_t m_effectAuraPeriod[3];
        float m_effectAmplitude[3];
        int32_t m_effectChainTargets[3];
        int32_t m_effectItemType[3];
        int32_t m_effectMiscValue[3];
        int32_t m_effectMiscValueB[3];
        int32_t m_effectTriggerSpell[3];
        float m_effectPointsPerCombo[3];
        int32_t m_effectSpellClassMaskA[3];
        int32_t m_effectSpellClassMaskB[3];
        int32_t m_effectSpellClassMaskC[3];
        int32_t m_spellVisualID[2];
        int32_t m_spellIconID;
        int32_t m_activeIconID;
        int32_t m_spellPriority;
        const char* m_name;
        const char* m_nameSubtext;
        const char* m_description;
        const char* m_auraDescription;
        int32_t m_manaCostPct;
        int32_t m_startRecoveryCategory;
        int32_t m_startRecoveryTime;
        int32_t m_maxTargetLevel;
        int32_t m_spellClassSet;
        int32_t m_spellClassMask[3];
        int32_t m_maxTargets;
        int32_t m_defenseType;
        int32_t m_preventionType;
        int32_t m_stanceBarOrder;
        float m_effectChainAmplitude[3];
        int32_t m_minFactionID;
        int32_t m_minReputation;
        int32_t m_requiredAuraVision;
        int32_t m_requiredTotemCategoryID[2];
        int32_t m_requiredAreasID;
        int32_t m_schoolMask;
        int32_t m_runeCostID;
        int32_t m_spellMissileID;
        int32_t m_powerDisplayID;
        float m_effectBonusCoefficient[3];
        int32_t m_descriptionVariablesID;
        int32_t m_difficulty;

        static const char* GetFilename();
        static int32_t GetNumColumns();
        static int32_t GetRowSize();
        static bool NeedIDAssigned();
        int32_t GetID();
        void SetID(int32_t id);
        bool Read(SFile* f, const char* stringBuffer);
};

#endif