// DO NOT EDIT: generated by whoa-autocode
#ifndef DB_LFGDUNGEONS_REC_HPP
#define DB_LFGDUNGEONS_REC_HPP

#include "util/SFile.hpp"
#include <cstdint>

struct LFGDungeonsRec {
	static constexpr uint32_t columnCount = 49;
	static constexpr uint32_t rowSize = 196;
	static constexpr bool indexIsID = false;

	int32_t m_ID;
	const char* m_Name_lang;
	int32_t m_MinLevel;
	int32_t m_MaxLevel;
	int32_t m_Target_level;
	int32_t m_Target_level_min;
	int32_t m_Target_level_max;
	int32_t m_MapID;
	int32_t m_Difficulty;
	int32_t m_Flags;
	int32_t m_TypeID;
	int32_t m_Faction;
	const char* m_TextureFilename;
	int32_t m_ExpansionLevel;
	int32_t m_Order_index;
	int32_t m_Group_ID;
	const char* m_Description_lang;

	static const char* GetFilename() {
		return "DBFilesClient\\LFGDungeons.dbc";
	}

	bool Read(SFile* f, const char* stringBuffer) {
		uint32_t Name_langOfs[16];
		uint32_t Name_langMask;
		uint32_t TextureFilenameOfs;
		uint32_t Description_langOfs[16];
		uint32_t Description_langMask;

		if (
			!SFile::Read(f, &this->m_ID, sizeof(this->m_ID), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[0], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[1], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[2], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[3], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[4], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[5], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[6], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[7], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[8], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[9], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[10], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[11], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[12], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[13], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[14], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langOfs[15], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Name_langMask, sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_MinLevel, sizeof(this->m_MinLevel), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_MaxLevel, sizeof(this->m_MaxLevel), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_Target_level, sizeof(this->m_Target_level), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_Target_level_min, sizeof(this->m_Target_level_min), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_Target_level_max, sizeof(this->m_Target_level_max), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_MapID, sizeof(this->m_MapID), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_Difficulty, sizeof(this->m_Difficulty), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_Flags, sizeof(this->m_Flags), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_TypeID, sizeof(this->m_TypeID), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_Faction, sizeof(this->m_Faction), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &TextureFilenameOfs, sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_ExpansionLevel, sizeof(this->m_ExpansionLevel), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_Order_index, sizeof(this->m_Order_index), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &this->m_Group_ID, sizeof(this->m_Group_ID), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Description_langOfs[0], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Description_langOfs[1], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Description_langOfs[2], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Description_langOfs[3], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Description_langOfs[4], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Description_langOfs[5], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Description_langOfs[6], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Description_langOfs[7], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Description_langOfs[8], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Description_langOfs[9], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Description_langOfs[10], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Description_langOfs[11], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Description_langOfs[12], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Description_langOfs[13], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Description_langOfs[14], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Description_langOfs[15], sizeof(uint32_t), nullptr, nullptr, nullptr)
			|| !SFile::Read(f, &Description_langMask, sizeof(uint32_t), nullptr, nullptr, nullptr)
		) {
			return false;
		}

		if (stringBuffer) {
			this->m_Name_lang = &stringBuffer[Name_langOfs[CURRENT_LANGUAGE]];
			this->m_TextureFilename = &stringBuffer[TextureFilenameOfs];
			this->m_Description_lang = &stringBuffer[Description_langOfs[CURRENT_LANGUAGE]];
		} else {
			this->m_Name_lang = "";
			this->m_TextureFilename = "";
			this->m_Description_lang = "";
		}

		return true;
	}
};

#endif